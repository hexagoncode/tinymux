# Makefile for TinyMUX 2.12

SHELL=/bin/sh
srcdir = @srcdir@
VPATH = @srcdir@
CC = @CC@
CXX = @CXX@
CXXCPP = @CXXCPP@
LIBS = @LIBS@

.DEFAULTS: all
.PHONY: all clean realclean mods docs

.SUFFIXES:
.SUFFIXES: .o .cpp .@DYNAMICLIB_EXT@

% : RCS/%,v
% : RCS/%
% : %,v
% : s.%
% : SCCS/s.%

OPTIM = -g -O3 -fno-omit-frame-pointer -Wall -Werror

# Base source and object files for building netmux
#

TARGETS = netmux slave @DYNAMICLIB_TARGET@ @STUBSLAVE_TARGET@
all: $(TARGETS) mods

mods:
	$(MAKE) -C modules

NETMUX_CXX = alarm.cpp alloc.cpp attrcache.cpp boolexp.cpp bsd.cpp	\
    command.cpp comsys.cpp conf.cpp cque.cpp create.cpp db.cpp		\
    db_rw.cpp eval.cpp file_c.cpp flags.cpp funceval.cpp		\
    funceval2.cpp functions.cpp funmath.cpp game.cpp help.cpp		\
    htab.cpp levels.cpp local.cpp log.cpp look.cpp mail.cpp match.cpp	\
    mathutil.cpp mguests.cpp modules.cpp move.cpp muxcli.cpp		\
    netcommon.cpp object.cpp pcre.cpp player.cpp player_c.cpp		\
    plusemail.cpp powers.cpp predicates.cpp quota.cpp rob.cpp set.cpp	\
    sha1.cpp speech.cpp stringutil.cpp strtod.cpp svdhash.cpp		\
    svdrand.cpp timeabsolute.cpp timedelta.cpp timeparser.cpp		\
    timer.cpp timeutil.cpp timezone.cpp unparse.cpp utf8tables.cpp	\
    vattr.cpp walkdb.cpp wild.cpp wiz.cpp
SLAVE_CXX = slave.cpp
LIBMUX_CXX = libmux.cpp
STUBSLAVE_CXX = stubslave.cpp
VER_CXX = version.cpp

# ucptable.cpp is included by pcre.cpp (!)
pcre.o: ucptable.cpp

NETMUX_OBJ = $(NETMUX_CXX:.cpp=.o)
SLAVE_OBJ = $(SLAVE_CXX:.cpp=.o)
LIBMUX_OBJ = $(LIBMUX_CXX:.cpp=.o)
STUBSLAVE_OBJ = $(STUBSLAVE_CXX:.cpp=.o)
VER_OBJ = $(VER_CXX:.cpp=.o)

MUX_LIBS = @MUX_LIBS@
DL_LIB = @DL_LIB@

# Version number routines
#
# Pull the version from git, if possible-- otherwise look for release.txt.
VER_ID_SRC=$(notdir $(firstword $(strip $(wildcard ../../.git) $(wildcard release.txt))))
VER_ID=$(if $(filter .git,$(VER_ID_SRC)),$(GITDESC),\
	  $(if $(filter release.txt,$(VER_ID_SRC)),$(shell cat release.txt),\
	  $(error Unable to determine source version. VER_ID_SRC is $(VER_ID_SRC))))

GITDESC = $(shell git describe --tags --long --dirty)
BUILDER = $(LOGNAME)@$(shell hostname)
BUILDTIME = $(shell date)
CXXVER = $(shell $(CXX) --version | head -n1)
UNAME = $(shell uname -a)
VER_FLG = -DMUX_BUILD_VER_ID="$(VER_ID)" \
	  -DMUX_BUILD_BUILDER="$(BUILDER)" \
	  -DMUX_BUILD_TIME="$(BUILDTIME)" \
	  -DMUX_BUILD_CXXVER="$(CXXVER)" \
	  -DMUX_BUILD_UNAME="$(UNAME)"

ALLCXXFLAGS = $(CXXFLAGS) $(OPTIM)

# Compiliation source files.
#
ALLSRC = $(NETMUX_CXX) $(SLAVE_CXX) $(LIBMUX_CXX) $(STUBSLAVE_CXX) $(VER_CXX)
# not VER_CXX...

.cpp.o:
	$(CXX) $(ALLCXXFLAGS) -c $<
.cpp.@DYNAMICLIB_EXT@:
	$(CXX) $(ALLCXXFLAGS) @DYNAMICLIB_CPPFLAGS@ \
		-o $@ $< @LIBS@ $(DL_LIB)

stubslave: stubslave.o
	$(CXX) $(ALLCXXFLAGS) -o stubslave stubslave.o -L. $(MUX_LIBS) $(STUBLIBS) $(LIBS)

slave: slave.o
	$(CXX) $(ALLCXXFLAGS) -o slave slave.o $(LIBS)

netmux: $(NETMUX_OBJ) $(VER_CXX) @DYNAMICLIB_TARGET@
	$(CXX) $(ALLCXXFLAGS) $(VER_FLG) -c $(VER_CXX) || $(RM) $(VER_OBJ)
	$(CXX) $(ALLCXXFLAGS) \
	    -o netmux $(NETMUX_OBJ) $(VER_OBJ) -L. $(MUX_LIBS) $(LIBS) \
	    && $(RM) $(VER_OBJ)

BASIC_CLEAN=$(strip $(wildcard *.o *~ a.out core gmon.out warn.log) $(PRODUCTS))
CONFIGS=$(wildcard config.log config.status Makefile depend)
PRODUCTS=$(wildcard netmux dbconvert @DYNAMICLIB_TARGET@ @STUBSLAVE_TARGET@)

realclean:
	$(MAKE) -C modules $@
	rm -rf $(strip $(BASIC_CLEAN) $(CONFIGS) $(wildcard doxygen))

clean:
	$(MAKE) -C modules $@
	rm -f $(BASIC_CLEAN)

docs:
ifeq (1,@HAVE_DOXYGEN@)
	doxygen
ifeq (1,@HAVE_PDFLATEX@)
	$(MAKE) -C doxygen/latex
else
	@echo 'No pdflatex installed; skipping PDF docs'
endif
else
	@echo 'No doxygen installed; skipping docs'
endif

ALLCODE=$(wildcard *.h *.cpp modules/*.h modules/*.cpp)
TAGS: $(ALLCODE)
	etags $(ALLCODE)
tags: $(ALLCODE)
	ctags $(ALLCODE)

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),realclean)
configure autoconf.h.in: configure.ac
	autoconf -f
	autoheader -f
Makefile autoconf.h: Makefile.in configure autoconf.h.in
	./configure && touch autoconf.h Makefile
$(wildcard *.o): Makefile

depend: Makefile $(ALLSRC)
	@echo Regenerating dependencies
	@$(CXX) -MM $(VER_FLG) $(ALLSRC) > depend || rm depend
-include depend
endif
endif

# end
